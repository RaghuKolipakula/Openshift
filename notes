Step 1: Understand What OpenShift Is

First Principles:
OpenShift is a Kubernetes-based platform for container orchestration.
It provides tools to manage containers, automate deployments, and scale applications.
Think of it as Kubernetes with additional features like a web console, built-in CI/CD, and enterprise-grade security.
Step 2: Set Up OpenShift

2.1. Choose How to Use OpenShift
Cloud: Use OpenShift Online or OpenShift Dedicated.
Local: Use CodeReady Containers (CRC) for a single-node cluster.
Cluster: Install OpenShift on bare metal, VMs, or cloud providers.
For Local Setup: Install CodeReady Containers (CRC)

Download CRC: CodeReady Containers.
Install CRC:
crc setup
Start CRC:
crc start
This starts a single-node OpenShift cluster.
Log in:
oc login -u developer -p developer
URL and credentials are displayed after crc start.
Step 3: Learn the Key Components

First Principles:
Projects: Like namespaces in Kubernetes, they isolate resources.
Pods: The smallest unit in OpenShift; runs containers.
Deployments: Automatically manage replicas and updates.
Services: Expose a stable endpoint for pods.
Routes: Make services accessible from the internet.
ImageStreams: Manage container images and track updates.
Step 4: Hands-On with OpenShift

4.1. Create a Project
A project organizes resources (pods, services, etc.).

oc new-project my-first-project
4.2. Deploy an Application
Deploy an app directly from an image.

oc new-app nginx --name=my-nginx
nginx: The container image.
--name=my-nginx: Names the deployment.
4.3. Expose the Application
Make your app accessible via a route:

oc expose svc/my-nginx
Get the route URL:

oc get routes
4.4. Scale the Application
Scale the application to 3 replicas:

oc scale deployment/my-nginx --replicas=3
Step 5: Manage OpenShift Resources

5.1. List Resources
oc get pods       # List all pods
oc get svc        # List services
oc get routes     # List routes
oc get all        # List all resources in the project
5.2. Inspect Resource Details
oc describe pod <pod-name>
oc describe svc <service-name>
5.3. View Logs
oc logs <pod-name>
Step 6: Configuration and Customization

6.1. Edit Resources
oc edit deployment <deployment-name>
6.2. Use YAML to Define Resources
Example YAML for a deployment:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      app: my-nginx
  template:
    metadata:
      labels:
        app: my-nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
Apply the YAML:

oc apply -f deployment.yaml
Step 7: Debugging and Troubleshooting

7.1. Check Events
oc get events
7.2. Access a Pod Shell
oc rsh <pod-name>
7.3. Check Cluster Status
oc status
oc get nodes
Step 8: Advanced Features

8.1. Build and Deploy from Source
Create a new app from source code:
oc new-app https://github.com/sclorg/django-ex
OpenShift automatically builds and deploys the app.
8.2. Use ImageStreams
ImageStreams track container images and updates. View all ImageStreams:

oc get imagestreams
8.3. Rollbacks
Roll back to a previous deployment version:

oc rollout undo deployment/my-nginx
Step 9: Practice Workflow

Create a Project:
oc new-project example-project
Deploy an App:
oc new-app nodejs~https://github.com/sclorg/nodejs-ex --name=my-app
Expose the App:
oc expose svc/my-app
Scale the App:
oc scale deployment/my-app --replicas=3
Monitor Logs:
oc logs -f <pod-name>
Step 10: Web Console

Access the OpenShift web console:
crc console
Log in using the credentials from crc start.
Key Commands Cheat Sheet
Action	Command
Login	oc login -u developer -p developer
Create project	oc new-project <project-name>
Deploy app	oc new-app <image>
Expose service	oc expose svc/<service-name>
Scale deployment	oc scale deployment/<name> --replicas=3
View logs	oc logs <pod-name>
List resources	oc get all
Edit resources	oc edit <resource-type> <name>
Rollback deployment	oc rollout undo deployment/<name>
